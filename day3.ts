const List = <T>(arr: T[]) => {
	const [h, ...t] = arr
	return {
		union: (other: T[]): T[] => {
			const s = new Set<T>([...other])
			return [...arr.filter((i) => s.has(i)).values()]
		},

		zip: <U>(other: U[]): [T, U][] => {
			const limit = arr.length >= other.length
				? other.length
				: arr.length

			return arr.slice(0,limit).map((x,i) => [x, other[i]])
		}
	}
}

const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('')
const [_, ...values] = [...Array(53).keys()]
const map = new Map<string, number>(List(alphabet).zip(values))


const day3 = [
	"pqgZZSZgcZJqpzBbqTbbLjBDBLhB",
	"wHptFFsHttHFLMDQDFTbbj",
	"fVfvsstwPHwNwfNGfHWRSnlpClcJzCWCzddSrddg",
	"bdgHbZJHgMHgJgJctDtVssVcpFtq",
	"rNNQqBSzTcBPTDsP",
	"GWNNrhGnNnWNzRfnRQRbhCdqHMbdmbZddbmCmd",
	"BSBDzrSwrqccDDwbfcBjsRwggClslTRWGWGMFlsF",
	"dnhVhLJtzNZdgCRlsTGWCRJG",
	"ZHZdNzptLNtPhPdnprPbbDBrSqrSQPjbqD",
	"rlSwlrGvwTTSwSggCJGQJdhVgJGQ",
	"jcrHrMWfNHNzQgVH",
	"WbfjmBMrBrrmLtqMbwwsPTvPpwvBPFPsws",
	"NRNcHzbzbMRcNPjPrrlBPlbtBl",
	"CZwVCCpWggqprwtlHlssHtPr",
	"WpmLghCVCqCnmVTLnccRQvvQQHDhNQzzzc",
	"NvGTmNGDJsrCmCWPHpCP",
	"nqfVfnFQnZQfFqzMZBPtppcBPPCBptcrbF",
	"fhRSSVfqMZZhMnQfjVzShNNlLvldsNDdvvljGpllDT",
	"JGRNWRGJbGmCGRbLmGpqShhcQpQgCcncScSQ",
	"FFdtjvvpvVFnQhhnQhgf",
	"ltvjjtjHlzBtWRmNPLZRHLpH",
	"FFCJFsvgLsjLgWzJFWJgGwBDbwnbwlDddqffnjnlnd",
	"pTpTMQpMZHQhZQpHPZMmTMlwhDNNddbnDqdDwwlbVNVd",
	"SHpmrHPZHQpmvFrqsFvgCsRq",
	"TtWpWhQlVZrVptJhtrtdbLPDPbjFbCCWCvFFbLSN",
	"zMGlnlsgSSvjjGSF",
	"msznlgcwMnRwznmBqTZQJrddhfQJtBJtZQ",
	"mwTwLftmqqSHWfCfLHjWftBthNNNVrlcFRVNrNrRTrMgrRNg",
	"pvJPJQPGPPzbpVpVlMBVchFl",
	"bzQPQbQQdsDZPDGJnBGnPGnjHDttqqqqmCjftLCmWmfftC",
	"ZNpfdHcccTfdwfMFNjBttMgMbBnvlvjBmB",
	"QVPsGzhbszRLRrgvtgjWgljlRtgt",
	"VJrVLsSrzLzGPChVGzbrrfpTSHFfDDHSdpZFfHpDTZ",
	"NPpvDbmbsmdbNvQvDdWQpmWSnnQCLBnCcQSCnnLlwCBlZz",
	"jggrtGTFhtGfjhDVjrjgMftFwnZcwwBCnzzVwBBwSZcVwLSw",
	"JfHftHhgftgFJWPdPDWRPDvPJv",
	"ZSLLZJGglDSVNDGGGgGgngGmHrfLzmHvvjfjwLhHvLfHHr",
	"QqFWszFMTQFdFPMqBmWBHvfhCwCjhHff",
	"pTsdppTMPtqqdbnlNVzJVbSSnbZR",
	"gBqDccrrJDwmpTWHHTdWMPWWZFHF",
	"RNfnfSwRjlLSWjQMHWvQZtvH",
	"GRLbnzNnzVRLCqhwzwBmJrmc",
	"CcGnZGnGlRncsspmFmmcmGRJJzCDTzjLBSDfqjwDDzDLDB",
	"hHrNdPWhrbPdhPgVWvvrgWdfwjfNzSqfqjLqzfBTzJzJTz",
	"HHQhhvMWbbdRswmlsmwsQc",
	"rrwhpZPrccRpQdcFDJNqhtqtqMLhqfMh",
	"lTtTllgbzTlJsmDMvbLbsf",
	"VVWBTgzlzgGnngrtQRQRtCtwZRQB",
	"HGnGvVdLhlFcmvPWmT",
	"jwBLqZgjrtjqmFsQTscPQs",
	"ZBNZtwLwztLpMrfZBLMdbdnfSRVVfnGbnfDVGh",
	"LmBBBzQrBgBhmmggmtdVdhJNMHNdhsHNDd",
	"ScSZbRplCcMnSpvCfCCZcpPwtJPNtHPHNVVNtPddwlNH",
	"CpvpZGfnffSpnvRSSbcfScQBWrMWmjrmFFBzTGQWjMmL",
	"sljSjSgsjcCLllsjVgSjCtspQwvNNhdFwFQvwpbtmhwhpN",
	"hDqqWzGRHHfRrJnrWrfWfHBdFmBFmBbdBGBpwmFdFpww",
	"TDnDHZrWWHhTjPClClSP",
	"wGNQGQDGjqqmwHHs",
	"MWvvrzgfsdWsvMrSdqJqcpgHgnqLFLnjpH",
	"fvsPMsPdrTZhChNDhbhPVN",
	"sbMgDDtttVvpMtcJsgcGGBBfGLBSLclQTGPS",
	"CWHWzhhRRHjqRmSGPfBSzJfSBnBB",
	"HjjRHWFWhRRwHNmCCRHhhFdNDNrdptMstJvsbMDtVptd",
	"RnSwRsLsnSswjDDDBJPrJv",
	"cpzCzlczHTJVQhvBQlDVDj",
	"WmGzqTmHSsffqqnJ",
	"vQSPHMwpmpQMLGfTPVLRPRVP",
	"hsWhnncsJqbGjGfcfBMMRR",
	"sqdNWqqghbsJslgsJqgWllMWDppSvNCHQHDSSHrHrHCSvvCQ",
	"ZWWnWMmmndQZmffcdZcmssQqrsptVwwTtQHTCTHH",
	"SvvrPzvvFDzGzTszpGGwHT",
	"vrRLjjrPhLjrjPDSfdcMZnmdcmJcfcRf",
	"HpqWhDJjzmcTSbmMBVBb",
	"nCzfLtFnZZrcbcVVfTBfsc",
	"FtRFzgrRtnRzrFwzDjljpjgHNJDlNlhN",
	"gtNRRSSrRmjshHmm",
	"PQDMwPwMppcQQcvCFlhLhGmjflctlnHGjf",
	"QwDMFFdtwFDQJZZZNqSqJSqBgBqTNJNg",
	"cddzbbzQflTDcDfRbcfbJVsplVsChNghHNsSsVpn",
	"FBWFWjFFCjWPBSPPJsVpppPSVH",
	"CrCwvjWvmqmvrBvFwZRGQQDDcGTcfbddZdRc",
	"ZBQqdGLFmmzDmTZz",
	"PvrVMvGgWmwSmllglS",
	"NrfGnvWWPhfpspsGvLJBsFBbqJCbdQcLBq",
	"DrwTrlfGThhQTpDdWSWgdgwLLgBSZH",
	"bqbPRVRmzJCLWSgCzCLH",
	"jRtbNVtNjNqRqsJtbjbMDQHQGlchfQpfsTcHpGHr",
	"tMnRcnpDcZtpQDSCCsGGHvcGPGqGsr",
	"mzJmjWJNlbfmbhzVCCPmZrCZqPGCgZ",
	"JWhzjJBdWnMLZtSBTw",
	"tvdLttzvtHLztnQpssdTPbMqbqMTdTss",
	"jhSRGNjjSjhSDCNhRgRgclNjmfZTPnbTMqJJfqqsbMflTfMs",
	"WnCjcjDRCChSNSCNDjNhGVDtQvVLHzFrpFwFrHFQQwQpzp",
	"fLbLLLLQhVPhBVmDwmCfwsdwwDps",
	"GNtctFTSrrJqGGpHFcTJFTwsslwmlmWsdsqRRCmqwdWs",
	"ppctFTTSgHcSrGrrTGFcrrnhhQbPLbQZgzLvQQVVvZvLhv",
	"mBBWnnBbBCtssmRThRDllR",
	"wfwFQcpHFpddFrwpGcHSHdcjQZZlqqDTTjZqssRhWllssj",
	"dWfrcSGFpgrSzFgMbCPNPLtCtVMV",
	"llLlGLJJMjJMGVSvVMSLRRHvjCZtgZccttnmbCtdCcmCCztn",
	"sBQNqPhsrrqrrwrsppsHswsZcmnNCzdZtbgntcNgcctnCt",
	"WWFBBsPwpWPwBBHpFFrWGRMRLlJfJVMJRJLWSJ",
	"vgMvQnPMntnSQPSgMvSMpNJfJDNNRpfZmGQmbDND",
	"HlbjHHBLjCHGZGpfJLpfwm",
	"qdHWqBbbbjrTzdqFqssvtPMSSFFg",
	"TGDfDHSgtTzPPbnCtnNtVn",
	"WQrWMFpMWMQbCVNPRWVWWv",
	"pdpMMrhrprQshlMFjZpdjZMgmlGJJGlGDBmgmHgmJCSBHG",
	"zWWBjZZjWPFFPPnBCVdsqmnCdSLn",
	"rJvpbvbpGgTGrNJGGpRRhsCqSsLhnsmTVnSLTLHh",
	"gNNNJDbpvGNfvNSDPPWQWWPZZWtjlQfc",
	"RRVbWWWvvZVWmsFSsDNbHsDSsg",
	"CrTwJQJpJpCCwvlJQTTPsfzDgfwNhszfszFhzFDh",
	"ttQJtvjpPvcqTllJTPtPRGMGRGLWdVZLVZjWdMjj",
	"NnPCTQWMMQNNNWwWnMzpHczzsZcCscddHdGs",
	"mqRgqqVlLgqmfVzcGpzzSHGZcgcz",
	"tjmZjZmhqftlJRJhlTMPTPQbrPBBWnhnnT",
	"hvTQqpvTqjvhpjnCqmCnSDSFDWFFLSSSWDnSVL",
	"tZwGgsfPcltgcZltRgNSDSSSSldmWMLWFVHd",
	"GrZtwRPbGwwPcGRsZGtRtgQJJhCjpzmTBTvJzJrjvzQp",
	"rwmwqDWwfDtztnFGBB",
	"LPdpdVcdPGvPVgZsPtlhTTtthHBhHF",
	"dRdCjvpCRpjvCMZgvLgRVJJSWMqmbwQJbMWGWQNbbQ",
	"CMCcMcDGzBGPmBmznTNbnGbrswNTwTvN",
	"SSHVWZphqWWJJzNsbnFwFVNjbz",
	"flLQqHzzgtQdcDRB",
	"mdzvFtllBgFttGnvfMwMVRRZCThSNZVhMd",
	"pDTrDHjWWJPqjDjDSMqNwSZRZhNSRNCZ",
	"jpcTpQPWLLpDTLcTrPjPDcjzzFLFzvgLzlzfvGFgfmgFzF",
	"fQVVPzBpFVVrtrsJ",
	"PldSLNSmWwMCcCMMcCNN",
	"mSPlldllmPdRnLRwmbnLwmwvTjBTghTHQjfgjpZHpfHHfZbZ",
	"pmfMcfprMqMrZZJcMZMGWTsFCVCTVPPsVTWCGPDP",
	"vrvvvLRbBNNBbvBbjBHbQhgDslPTWsPTlFDsFTFwTWlDVQ",
	"hgjznNBjHHgrhRHgrRLRnRfSSJmdqMfffzqJptdmmmdd",
	"nRnPlCRPWPMFqwPLwq",
	"tBGfbSbHtBVQgrbrqfTFFLvTNLLNGTGMLdws",
	"bgHVtBDtqnqqlJRD",
	"SdSJrHssFBSVsNtMMdRWnTRhRl",
	"vcvfDvgvcwvFRlbnwWRlMhtn",
	"DDDqcqFZQPgcgcfvDjLDfVrsSVrHBLJVpLpCSppGpS",
	"gJGTFLTdrpLdBcWBvnllvlMvMC",
	"RRqbbQhwNZZwQRPrSZWnvHSZWSvSZC",
	"fQDNRsrsQzfbDrbsqwdtpgJVjdJdpVfJFLFF",
	"DzWqFvqpqFSCSzGRGmwfntGjmR",
	"cbhZNJQBtgMHJbJcNcrmfhrRrswmfRwnVrhG",
	"bJNgbNdJBBPMHbcMNMWWvSFpDLFvCStqpLdv",
	"sLsHTsTbRLRwqssHwHjFrPDwJDppzFDJmmcrPJ",
	"BnZGBlMZnQSgSnvVSMmJzPDCzFcrLPPJmpDG",
	"BgBffVLhQLgvnBRRssfqdfHbHdNT",
	"HRPVmjqBqVjVRRPmcPmJjbDgLDDshbfRLlfbfLbhlL",
	"rtTzSMSMFpTzfgDzzgsLfLHZ",
	"rNpGpSSHwMTrrdHGNtTPmVjnGGjVjmBGmmBjJB",
	"DBqDQDQHSFlHsFnN",
	"MfLfwwLMWGLrWMMnpSlsnGJJlbFVjV",
	"gRhMZzhrFLWQvTPqTPcvvh",
	"NwwsHwtnFCtzcPdbvrQbBqclQq",
	"VmZLLTLfVpwMBrVVqqMM",
	"mgJDjTgWgLWDppJZJTWZmSRzCtRHhGGwHNzshGFFCSRt",
	"RGCCDRdFZdRCMzzGCDGCmGHMfqbNNNLQLfFqnnqnNQqVPnQn",
	"glgcrwrJjJccBwdSfnSnVqrqQVVnNq",
	"jvtBsjstgstjltBcWzTGGddHTWDTZCmDGm",
	"HJHGZZHnctSSDhZtmZ",
	"MjjQFSvQlRjSdRqdqvVSqCCPtpRpPPDfDmfPbbpphC",
	"SNsWqMNvFFqdqVMgwwBHrGHnHgcWTJ",
	"jBcbjSmSBbbCcPcMjmbzFPhDMDfrfGRhGQRMnGQfdrDh",
	"wHlqwlqpwZqcwVlqHtJVJLTdhndTDnhffftTGDTTDdTG",
	"JNllcwpZZlpZJjNzSzSCNjSmFN",
	"FhwRPzmPWmQQmwFPGGMGGRPnRHHVfDbvJlvDlHSvDTDfVHbD",
	"NpjcpCdqpZZvwvJVfDdDHT",
	"twZtqrBrBQBMBPGn",
	"fBFGjbLLFblmbWFmVfBvrvMdMdncnrdNbdQNTr",
	"shZHHRZhtsqJZhHhgZzgJzVJrrSSvrMdMQrNTvMNJQNrdn",
	"szHwgtHtwPzPLpVFpVPLlfLC",
	"mrsrtrWjljjjvwwgNnZfDHJDqTqrHL",
	"FccMPFQcpczpdMPhMqJngNfqfnFgDnnFfg",
	"BdMpdcDPcpjBmlBmVWts",
	"VvwTTlfVlblwwSsbfTdzVqjhzVjpjjqjqpzV",
	"rwCWFGmJrNCmMRHmwRFPmHQQhBLBzdLqBjhLBHZdQB",
	"rFwDrMNRJDJFPRmCvcTcbDsvstTgfTsg",
	"zhRzdRRChHCFGPDRvWRWvWvHpZpscrrmrZrJcmspJmJZFfpM",
	"wQqLtQLtnjbjVnVjbBgjbBnbMZMZJlVpZfJprsMprmGZZZml",
	"jQjjNBLLwjtQBtwwdGGDCHhNzzWDzTPD",
	"DzzQnCMMznFnCdnFFlHtlmhVRtmVVmVhSF",
	"PWrPPRTfLJJtfbtBfV",
	"wsrggZsTwTTWGvDppQMRjjMCjMZp",
	"fTjzZVTlbffCMvjgMpSFWBNBWSFsvBsNNccF",
	"nJdwdPRQqGqbGJQbmmQQhRSBBBSsPPHWNSWFBtDNBsHH",
	"nnQhwwQGdLqqwnZbpfjMfzpzLbLj",
	"jgTgCwgjMgGLhvRrHrHwhvhV",
	"bqSsSsZFZBlFsBlTSppVvVvnVHHvHnhp",
	"qFlbPbFFsWFsBlFWbsbsmzTcMjLmtfcCmcWtgzgm",
	"rrHbfBLbfMcghcmrcCzg",
	"RDStDtvdZRQdJSQWWWdvFSgNvVcnghhmnnzhVPhczPch",
	"ZtJpJttSZStwtttFDQmLGTlqMLqGfwTTGLfTGG",
	"MrfLWwfBwgghvLmNvmHHHGGQHQSSscscVvTV",
	"dDjZjDPJtFRzjdTTsqVjTpqHsGrT",
	"JbFtlbPRJCzffBrgnlMWmg",
	"ZFsbbVLLdZppLFpcJjCCQJlGcQCMZq",
	"TwRtRBdBClCTGlcJ",
	"rwBvBzDvwNNDHLHzfHssdHhS",
	"gdhgftTNGTbpqJqjjgRJ",
	"lcBcMLFzMzLFMzFzPjRBQjQPQpSqhpbp",
	"mzzmZHZZnZwLhtGfddVsNCCnGG",
	"lblbPGSGrTLRwqZLvP",
	"FffCCFzFCWzzvmjRJnRTnZZNJCTqCR",
	"gdhztVjhHMsGvrGVVB",
	"ZJZjJGHZhDJRFJHjDZjhPNFgFmrnVmgVVzVBscnzSg",
	"bwlWtMwtbqdCvlQCplmsqgnVVScnVgmnmzNs",
	"WMWltTtvvCdwCCRPPfTHGcJDfGZL",
	"svqQJLvSSZrZZZCFCBDPDCMTDpPwMWDPCwRw",
	"GnlnGbdldjhzzhpPDTWjmtMwPmWW",
	"HzVbGnnbchblbnbzcQTZBZrQrFSHvLBBJv",
	"MmgMmVpcRDlvbvpHJF",
	"GSGTLTwhwwhzQqTqwjFlbdvdbrlrbrrDnDvHlQ",
	"zLNNNtwGFCMsWsCWNR",
	"tSTDDDftSqSsTDnTtCWNrbFsNJJvbzJbvJ",
	"dhRdVHdMGRgPJbjNPbzgvr",
	"VllQmQdhRHLhhHmLlGzSqSQDDcDBnnBnqDfSct",
	"zBzJWZBLZNNGLsbTvLbmbT",
	"QdtQwfdnPdPTbsRQGhRvbl",
	"pgtPgPjVDnpVnDtPTFFrJJTBCcpcrpCW",
	"GnWMfBfdCGMbjRNpnzvvNLRNVv",
	"FShJDJJscwwszNjvNjNNqZ",
	"tJmccwlcFlFcHlPcHFfdrbBGBGfjCGTfBCPf",
	"GhlcQsZNQZWhpcGhwlPmqnnqnjJjLRnqzJsJLJ",
	"VTMtTtDTbvbMTfvdJqngjmqzdjmJjCLm",
	"vHtbHTDBFvffBPGwLLZBQNNl",
	"bDphJrpbpnBbDrdBvJdDFBMtMlfgtsFSstfGPPgggPGP",
	"RZmNjTZQNVHQHNGSgMsfPlShSs",
	"VmchTLZQLjVLjmTVmQVhTmwVrWJqbDqddBrpnWbvnqrqcnJB",
	"jWWgThWtgSvSSWlJtlShllPcHVnJHPbMHPcPVPbVZrHM",
	"fGdfRsRdNwfRQhnpcZdVhVpbPh",
	"fGhwNBqNjqStFqtj",
	"TSTBrSDlQlTDrrQclrBSLffPvcfcdVjVMGGPLjLL",
	"qnbnbngFGhhhPfjjVffjff",
	"RRWbmgpnmqlrCwwSrwmG",
	"mZZTsdBZVZBZLVHdFmsNnCrCVQQbWvWjWNCnbg",
	"QSffDGwGGrPGWrgN",
	"hflwzltflDpMpDSllcMDhSShdsdZQdLZZdHTssZzmqLzFmLB",
	"LLRJRshLfsJfWnLBTlTBlFzNrnrBBl",
	"qmmVwmdHqmqGHZdHbbqSScdZQTjjpTFFVBBrlDrzDFBTjFjF",
	"wZZwmcbvHgqTmGccmvdCLhCPJsJCPWgMLPtJsJ",
	"TWbbbNbJJjJbqTjtJJjTQCtnGSBndMGCcSZSQwCB",
	"mcfRfrcmrDRrPsdQSGZQGnsSQMnB",
	"DDRLDRDFPpgmpcgPghpfgvRTjbhTVjHljJjzlVzVTlbHll",
	"rPlPrPllBGgJgdJfHgfjJt",
	"pppZVfFDWssMfFVVFMpsMMVmHCRLdcZCRtvLRdCtCJdHRttH",
	"mDMfDFDmnMMmsMFznDFpzswbNbPGwwSGBrGrhrTzThSl",
	"qDNFfCCNWLfWWhqhDGPMMZVwgpCpMbJwJCvV",
	"RdstRRvdtmtPVpppVbVtrp",
	"zzncSRdsTdQTczQBsLvvHNhDWGjDHNLDSG",
	"bNNpcfJcCtNpHFsJsGGjLGzmLjLmGzlFGW",
	"qwqZdnQnQwnhhzmnMWjmNlMzLr",
	"qhwwQSwStJbHNftS",
	"WlfWSwDftzRltBWVlRDlsmBJPcsZPmcJnmPmFhrn",
	"dLQbQbvGTddTvbjQCbLbhmCrZZPPsshPPPrJZrnF",
	"QgFjQHHbMvdRMVllSqfSlf",
	"MDPJBWWPggVlPVDMSljdZNNpwjwbHZpNbDdH",
	"mGmzcThGrtntHhthzGctRbNRNwRNzZwfdZpjpdRj",
	"ThtcvvtThFcnqFQSHgBSVJll",
	"hVqhFLBngHVFtJjtLCBJVSbbPNNbSmfLLTSNSrrLTb",
	"vsdZZpvQdczlMdMvzlcvvdQprbGGTfSbWmzPTgmmGTbmmfGP",
	"vgRZZMgwdgsQZdMBqVhjhJqBhJtRhq",
	"bgFQbMMbTbQhghddFTFGnmSmsNdzHvzSSzlcHsls",
	"fZDjVtfZLqwpqtCfCjCjlvqScrvzqHSzszzSnczr",
	"jpftjCfWCjCfCRZZlpCpjRWQBRTQQbgBBTMbghgbbPGJBJ",
	"VZZrbBVwbbbVVvgbntnggNRJqRRNNccMcNqJcJ",
	"jfDPfDdGGhDGfGFPCcZQqMpRNJhqTcMc",
	"LPfffPHGPDjPFGWSdHPFjWtlBlwvlwBlbtmLltsmvtZb",
	"TTfJDfrJTSrHMcVMJDTfMcMDBQBPwnPlznPszFVBFgzFgnsn",
	"CqtmWNNGBPzwbbwm",
	"htdCthhWGtWWGNZqcZpJjwwHHHMcHZDM",
	"VvjQjQCZLbbSbTPpSHtFzsHzppMfzz",
	"DJrJWBcDcWJWmmcgGRGRGWGDzHHwzdfRHpMztMpfdFdFdzdM",
	"DmBgGDqJNhGcccWmcZLjTPLVLTQhPtvvTZ",
	"qfhvwNDQqwDGdGZZGwPTTw",
	"STsJgsRtJMZPjlsmdpbs",
	"SCTTHTWHNVfHQqqq",
	"djCDgllgjJjDRRNgRlDdBgtpQHfhQTrLLrGBtzrQhpBH",
	"SVcsMGcPSbqSPmLTPHHQTHrftPTr",
	"VcWnsScqSScWcZbMMcSVGbNNlgDRlgCCNgwWvvRJdNdj",
	"mgPllfRgvNmPGQGGsmQNWlpFtnBPFShncTFShtFShnjS",
	"tLLzMJJwwbbdrrMLqLVJMzVZFnpTTFpnCSSpShCjBJhpThph",
	"HMdVwbbLMbDMDVlmDsgtNtNRfgsm",
	"hNsgsgzNZRghPhZBdssPQfzDmQSmmzQGJWzfCDJJ",
	"bblVHvvHHTljwFCfGrvmfmmJBmGQ",
	"THMMFVwqTPRdZptMBP",
	"QvcPGSvQLjmcQWSGWWGjLCNhhqpCdBCNCbJNdVWpCh",
	"rwtLlzZggLHnHlwHRDdVqBbCdqqVVhbqVnVh",
	"zRDzwRrwlRlRTgrDtllmQGLcPjGLccFmTcGSQc",
	"RWlgQlbcWBwzsJggTfhh",
	"GrnLjHLjmLjjGSLjSDmfJJpfThhfSWJPqJqhwz",
	"vLvDDnDNrCVjCmNDbFlBVZdVRQlRbWcb",
	"mTlwFngwmlLlvsmLHmHsLJhJFfcbdpbNcjCNCbpccb",
	"tZRzBRzBBRQzPqGRqrVQtjjfbCMcfMfCMMjVjfCJNd",
	"SDBBPtZZTdnnwSvg",
	"nddNNMMPNBnBNnBTQSShlSHghlDHBr",
	"VcccVmqJsJsjlTmzTDggmHHT",
	"VqLtFCqFJfVtVjsNgPNNMMWNwgtNvn",
]

type Batch = [string, string, string] 

const prebatch: Batch[] = [...Array(day3.length / 3).keys()].map ( i => day3.splice(0,3) as Batch )

console.log(
prebatch.reduce<number>((a, r: Batch) => {

	const x = List(List([...r[0]]).union([...r[1]])).union([...r[2]])[0]

	return a + (map.get(x) ?? 0)
}, 0)
)

// Part one below

// const List = <T>(arr: T[]) => {
// 	const [h, ...t] = arr
// 	return {
// 		union: (other: T[]) => {
// 			const s = new Set<T>([...other])
// 			return arr.filter((i) => s.has(i))[0]
// 		},

// 		zip: <U>(other: U[]): [T, U][] => {
// 			const limit = arr.length >= other.length
// 				? other.length
// 				: arr.length

// 			return arr.slice(0,limit).map((x,i) => [x, other[i]])
// 		}
// 	}
// }

// console.log(
// day3.reduce<number>((a,r) => {
// 	const i = Array.from(r)
// 	const [s,l] = [i.splice(0, r.length / 2), i]
	
// 	const x = List(s).union(l)

// 	return a + (map.get(x) ?? 0)
// }, 0)
// )


